using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.TerrainTools;
using UnityEngine;


[CustomEditor(typeof(SpeechBubbleGen))]
public class SpeechBubbleEditor : Editor
{
	private SpeechBubbleGen generator;

	private SerializedProperty bubble; //Bubble
	private SerializedProperty trigger; //TriggerType
	private SerializedProperty clip; //string
	private SerializedProperty audioClip; //AudioClip
	private SerializedProperty colliderTwoD; //colliderTwoD
	private SerializedProperty colliderThreeD; //colliderThreeD
	private SerializedProperty textJSON; //TextAsset
	private SerializedProperty metaPath; //string
	private SerializedProperty textBox; //TextMeshPro
	private SerializedProperty audioSource; //AudioSource

	private void OnEnable()
	{
		bubble = serializedObject.FindProperty("bubble");
		trigger = serializedObject.FindProperty("trigger");
		clip = serializedObject.FindProperty("clip");
		audioClip = serializedObject.FindProperty("audioClip");
		colliderTwoD = serializedObject.FindProperty("colliderTwoD");
		colliderThreeD = serializedObject.FindProperty("colliderThreeD");
		textJSON = serializedObject.FindProperty("textJSON");
		metaPath = serializedObject.FindProperty("metaPath");
		textBox = serializedObject.FindProperty("textBox");
		audioSource = serializedObject.FindProperty("audioSource");
}

	public override void OnInspectorGUI()
    {
		serializedObject.UpdateIfRequiredOrScript();

        generator = (SpeechBubbleGen)target;

		EditorGUILayout.PropertyField(clip, new GUIContent("Audio Clip", "The audio clip generated by the CoquiTTS generator"));
		EditorGUILayout.PropertyField(trigger, new GUIContent("Bubble Trigger", "How do you want the speech bubble to be triggered"));

		EditorGUI.indentLevel++;

		if (generator.trigger == TriggerType.Collider2D)
		{
			EditorGUILayout.PropertyField(colliderTwoD, new GUIContent("2D Collider", "The 2D collider you wish to use as a trigger"));
		}

		if (generator.trigger == TriggerType.Collider3D)
		{
			EditorGUILayout.PropertyField(colliderThreeD, new GUIContent("3D Collider", "The 3D collider you wish to use as a trigger"));
		}

		EditorGUI.indentLevel--;

		ReadOnlyTextField(true, new GUIContent("Bubble Text", "Text generated from meta data"), generator.bubble.text);
		ReadOnlyTextField(false, new GUIContent("Language Model", "Model name generated from meta data"), generator.bubble.model);

		EditorGUILayout.Space(10);

		EditorGUILayout.BeginHorizontal();
		float buttonWidth = 200;
		GUILayout.Space(Screen.width/2 - buttonWidth/2);
		if (GUILayout.Button("Generate Speech Bubble", GUILayout.Width(buttonWidth), GUILayout.Height(25)))
		{
			generator.Generate();
		}
		EditorGUILayout.EndHorizontal();


		if (clip.stringValue != string.Empty)
        {
            generator.GetMeta();
        }

		serializedObject.ApplyModifiedProperties();
	}

	void ReadOnlyTextField(bool area, GUIContent label, string text, float height = 40)
	{
		
		if (area)
		{
			EditorGUILayout.LabelField(label, GUILayout.Width(EditorGUIUtility.labelWidth - 4));
			GUILayout.BeginScrollView(new Vector2(0,0), GUILayout.Height(height));
			{
				GUILayout.TextArea(text, EditorStyles.textField, GUILayout.ExpandHeight(true));
			}
			GUILayout.EndScrollView();
		}
		else
		{
			EditorGUILayout.BeginHorizontal();
			{
				EditorGUILayout.LabelField(label, GUILayout.Width(EditorGUIUtility.labelWidth - 4));
				EditorGUILayout.SelectableLabel(text, EditorStyles.textField, GUILayout.Height(EditorGUIUtility.singleLineHeight));
			}
			EditorGUILayout.EndHorizontal();
		}
	}
}
