using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Unity.VisualScripting;
using UnityEditor;
using UnityEditor.TerrainTools;
using UnityEngine;


[CustomEditor(typeof(SpeechBubbleGen))]
public class SpeechBubbleEditor : Editor
{
	private SpeechBubbleGen generator;
	private List<Collider2D> collider2DArr = new List<Collider2D>();
	private List<Collider> collider3DArr = new List<Collider>();
	private List<string> colliderStringArr = new List<string>();

	private SerializedProperty indx;
	private SerializedProperty bubble; //Bubble
	private SerializedProperty trigger; //TriggerType
	private SerializedProperty meta; //string
	private SerializedProperty audioClip; //AudioClip
	private SerializedProperty colliderParent; //GameObject
	private SerializedProperty textJSON; //TextAsset
	private SerializedProperty metaPath; //string
	private SerializedProperty textBox; //TextMeshPro
	private SerializedProperty audioSource; //AudioSource

	private void OnEnable()
	{
		indx = serializedObject.FindProperty("indx");
		bubble = serializedObject.FindProperty("bubble");
		trigger = serializedObject.FindProperty("trigger");
		meta = serializedObject.FindProperty("meta");
		audioClip = serializedObject.FindProperty("audioClip");
		colliderParent = serializedObject.FindProperty("colliderParent");
		textJSON = serializedObject.FindProperty("textJSON");
		metaPath = serializedObject.FindProperty("metaPath");
		textBox = serializedObject.FindProperty("textBox");
		audioSource = serializedObject.FindProperty("audioSource");
	}

	public override void OnInspectorGUI()
	{
		serializedObject.UpdateIfRequiredOrScript();

		generator = (SpeechBubbleGen)target;

		EditorGUILayout.PropertyField(meta, new GUIContent("Meta Data", "The meta data generated by the VocaliseNow generator"));
		EditorGUILayout.PropertyField(trigger, new GUIContent("Bubble Trigger", "How do you want the speech bubble to be triggered"));

		EditorGUI.indentLevel++;

		if (generator.trigger == TriggerType.Collider2D || generator.trigger == TriggerType.Collider3D)
		{
			EditorGUILayout.PropertyField(colliderParent, new GUIContent("Parent Object", "The object that contains the collider you wish to use as a trigger"));

			if (generator.trigger == TriggerType.Collider2D && colliderParent.objectReferenceValue != null)
			{
				//EditorGUILayout.PropertyField(colliderTwoD, new GUIContent("2D Collider", "The 2D collider you wish to use as a trigger"));
				ContructColliderArray((GameObject)colliderParent.objectReferenceValue, true);
				indx.intValue = EditorGUILayout.Popup(new GUIContent("2D Collider", "The 2D collider you wish to use as a trigger"), indx.intValue, colliderStringArr.ToArray());
				if (collider2DArr.Count() != 0)
				{
					generator.available2DCollider = collider2DArr[indx.intValue];
				}
			}

			if (generator.trigger == TriggerType.Collider3D && colliderParent.objectReferenceValue != null)
			{
				//EditorGUILayout.PropertyField(colliderThreeD, new GUIContent("3D Collider", "The 3D collider you wish to use as a trigger"));
				ContructColliderArray((GameObject)colliderParent.objectReferenceValue, false);
				indx.intValue = EditorGUILayout.Popup(new GUIContent("3D Collider", "The 3D collider you wish to use as a trigger"), indx.intValue, colliderStringArr.ToArray());
				if (collider3DArr.Count() != 0)
				{
					generator.available3DCollider = collider3DArr[indx.intValue];
				}
			}
		}
		serializedObject.ApplyModifiedProperties();

		if (meta.stringValue != string.Empty)
		{
			generator.GetMeta();
		}

		EditorGUI.indentLevel--;

		EditorGUILayout.LabelField(new GUIContent("Bubbles:", "All the paragraphs in this meta file"));
		EditorGUI.indentLevel++;
		for (int i = 0; i < generator.bubble.bubble.Length; i++)
		{
			ReadOnlyTextField(true, new GUIContent("Text " + i.ToString() + ":", "Text generated from meta data"), generator.bubble.bubble[i].speech);
		}
		ReadOnlyTextField(false, new GUIContent("Voice Model:", "Model name generated from meta data"), generator.bubble.model);
		EditorGUI.indentLevel--;

		EditorGUILayout.Space(10);

		EditorGUILayout.BeginHorizontal();
		float buttonWidth = 200;
		GUILayout.Space(Screen.width/2 - buttonWidth/2);
		if (GUILayout.Button("Generate Speech Bubble", GUILayout.Width(buttonWidth), GUILayout.Height(25)))
		{
			generator.Generate();
		}
		EditorGUILayout.EndHorizontal();

	}

	void ReadOnlyTextField(bool area, GUIContent label, string text, float height = 40)
	{
		if (area)
		{
			EditorGUILayout.LabelField(label, GUILayout.Width(EditorGUIUtility.labelWidth - 4));
			GUILayout.BeginScrollView(new Vector2(0,0), GUILayout.Height(height));
			{
				EditorStyles.textField.wordWrap = true;
				GUILayout.TextArea(text, EditorStyles.textField, GUILayout.ExpandHeight(true));
			}
			GUILayout.EndScrollView();
		}
		else
		{
			EditorGUILayout.BeginHorizontal();
			{
				EditorGUILayout.LabelField(label, GUILayout.Width(EditorGUIUtility.labelWidth - 4));
				EditorGUILayout.SelectableLabel(text, EditorStyles.textField, GUILayout.Height(EditorGUIUtility.singleLineHeight));
			}
			EditorGUILayout.EndHorizontal();
		}
	}

	void ContructColliderArray(GameObject parent, bool twoD)
	{
		colliderStringArr = new List<string>();
		collider2DArr = new List<Collider2D>();
		collider3DArr = new List<Collider>();
		if (twoD)
		{
			foreach(Collider2D col in parent.GetComponents<Collider2D>())
			{
				colliderStringArr.Add(col.GetType().ToString());
				collider2DArr.Add(col);
			}
		}
		else
		{
			foreach (Collider col in parent.GetComponents<Collider>())
			{
				colliderStringArr.Add(col.GetType().ToString());
				collider3DArr.Add(col);
			}
		}
	}
}
